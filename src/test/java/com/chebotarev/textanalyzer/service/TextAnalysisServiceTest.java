package com.chebotarev.textanalyzer.service;

import com.chebotarev.textanalyzer.model.WordFrequency;
import com.chebotarev.textanalyzer.util.CustomHashMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class TextAnalysisServiceTest {
    private TextAnalysisService service;

    @BeforeEach
    void setUp() {
        CustomHashMap<String, Boolean> dictionary = new CustomHashMap<>();
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        dictionary.put("dont", true);
        dictionary.put("wont", true);
        dictionary.put("cant", true);
        dictionary.put("stateoftheart", true);

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        dictionary.put("hello", true);
        dictionary.put("world", true);
        dictionary.put("java", true);
        dictionary.put("test", true);
        dictionary.put("testing", true);

        service = new TextAnalysisService(dictionary);
    }

    @Test
    void testSpecialCases() {
        // –¢–µ—Å—Ç —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º–∏
        String text = "don't won`t can‚Äôt";
        CustomHashMap<String, Integer> map = service.countWords(text);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        assertEquals(1, map.get("dont"));
        assertEquals(1, map.get("wont"));
        assertEquals(1, map.get("cant"));

        // –¢–µ—Å—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        String hyphenText = "state-of-the-art";
        CustomHashMap<String, Integer> hyphenMap = service.countWords(hyphenText);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–µ —Å–ª–æ–≤–æ
        assertEquals(1, hyphenMap.get("stateoftheart"));
    }

    @Test
    void testEdgeCases() {
        // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
        String longWord = "a".repeat(1000);
        CustomHashMap<String, Integer> map = service.countWords(longWord);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–µ–ª–∏–∫–æ–º
        String firstPart = longWord.substring(0, 50);
        assertNull(map.get(firstPart)); // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –ø–æ —á–∞—Å—Ç–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
        assertEquals(1, map.get(longWord));

        // –¢–µ—Å—Ç —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
        String mixedText = "English —Ä—É—Å—Å–∫–∏–π Êó•Êú¨Ë™û ‰∏≠Êñá üöÄ";
        CustomHashMap<String, Integer> mixedMap = service.countWords(mixedText);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        assertEquals(2, mixedMap.entries().size());
        assertEquals(1, mixedMap.get("english"));
        assertEquals(1, mixedMap.get("—Ä—É—Å—Å–∫–∏–π"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        assertNull(mixedMap.get("Êó•Êú¨Ë™û"));
        assertNull(mixedMap.get("‰∏≠Êñá"));
        assertNull(mixedMap.get("üöÄ"));

        // –¢–µ—Å—Ç —Å —á–∏—Å–ª–∞–º–∏
        String numberText = "123 45.6 78,9 100%";
        CustomHashMap<String, Integer> numberMap = service.countWords(numberText);
        assertEquals(4, numberMap.entries().size()); // –í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    }
    @Test
    void testCountTotalWords() {
        assertEquals(0, service.countTotalWords(""));
        assertEquals(1, service.countTotalWords("single"));
        assertEquals(5, service.countTotalWords("one two three four five"));
        assertEquals(2, service.countTotalWords("  extra   spaces   ")); // –ë—ã–ª–æ 3
    }

    @Test
    void testCountWords() {
        String text = "hello world hello java";
        CustomHashMap<String, Integer> frequencyMap = service.countWords(text);

        assertEquals(2, frequencyMap.get("hello"));
        assertEquals(1, frequencyMap.get("world"));
        assertEquals(1, frequencyMap.get("java"));
        assertNull(frequencyMap.get("nonexistent"));
    }

    @Test
    void testSortByFrequency() {
        CustomHashMap<String, Integer> frequencyMap = new CustomHashMap<>();
        frequencyMap.put("apple", 3);
        frequencyMap.put("banana", 5);
        frequencyMap.put("cherry", 1);

        List<WordFrequency> sorted = service.sortByFrequency(frequencyMap);

        assertEquals(3, sorted.size());
        assertEquals("banana", sorted.get(0).getWord());
        assertEquals(5, sorted.get(0).getFrequency());
        assertEquals("apple", sorted.get(1).getWord());
        assertEquals("cherry", sorted.get(2).getWord());
    }

    @Test
    void testCheckSpelling() {
        String text = "helo javva testing xyz";
        CustomHashMap<String, List<String>> errors = service.checkSpelling(text);

        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –æ—à–∏–±–∫–∏: "helo", "javva"
        assertEquals(2, errors.entries().size());

        // "testing" –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ -> –Ω–µ –æ—à–∏–±–∫–∞
        assertNull(errors.get("testing"));

        // "xyz" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ -> –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
        assertNull(errors.get("xyz"));
    }

    @Test
    void testFindWordPositions() {
        String text = "hello world hello java hello\nhello";
        List<Integer> positions = service.findWordPositions(text, "hello");

        // –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏: 0, 2, 4, 5
        assertEquals(4, positions.size());
        assertEquals(List.of(0, 2, 4, 5), positions);
    }

    @Test
    void testFindWordPositionsNotFound() {
        List<Integer> positions = service.findWordPositions("hello world", "nonexistent");
        assertTrue(positions.isEmpty());
    }
    @Test
    void testLargeTextProcessing() {
        // –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (1 000 000 —Å–ª–æ–≤)
        StringBuilder bigText = new StringBuilder();
        int wordCount = 1_000_000;
        int uniqueWords = 10_000;

        Random random = new Random();
        for (int i = 0; i < wordCount; i++) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            bigText.append("word").append(random.nextInt(uniqueWords)).append(" ");
        }

        // –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        long startTime = System.currentTimeMillis();
        CustomHashMap<String, Integer> frequencyMap = service.countWords(bigText.toString());
        long endTime = System.currentTimeMillis();

        System.out.printf("Processed %,d words in %,d ms%n", wordCount, endTime - startTime);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        int totalCount = 0;
        for (var entry : frequencyMap.entries()) {
            totalCount += entry.value;
        }
        assertEquals(wordCount, totalCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        assertEquals(uniqueWords, frequencyMap.entries().size());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        assertTrue(endTime - startTime < 2000, "Processing took too long: " + (endTime - startTime) + "ms");
    }

    @Test
    void testCaseSensitivity() {
        String text = "Hello hello HELLO hElLo heLLo";
        CustomHashMap<String, Integer> frequencyMap = service.countWords(text);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ entries()
        List<CustomHashMap.Entry<String, Integer>> entries = frequencyMap.entries();
        assertEquals(1, entries.size());
        assertEquals(5, entries.get(0).value);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ get()
        assertEquals(5, frequencyMap.get("hello"));
    }

    @Test
    void testPunctuationHandling() {
        String text = "Hello! World... Java?";
        CustomHashMap<String, Integer> frequencyMap = service.countWords(text);

        assertEquals(1, frequencyMap.get("hello"));
        assertEquals(1, frequencyMap.get("world"));
        assertEquals(1, frequencyMap.get("java"));
    }

    @Test
    void testEmptyInput() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å –ø—É—Å—Ç—ã–º –≤–≤–æ–¥–æ–º
        assertEquals(0, service.countTotalWords(""));

        CustomHashMap<String, Integer> emptyMap = service.countWords("");
        assertEquals(0, emptyMap.entries().size());

        CustomHashMap<String, List<String>> emptyErrors = service.checkSpelling("");
        assertEquals(0, emptyErrors.entries().size());

        List<Integer> emptyPositions = service.findWordPositions("", "word");
        assertTrue(emptyPositions.isEmpty());
    }
}